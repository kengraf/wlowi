## DynamoDB
Table Name: Wlowi
Key index = Id
Game attribute is the game's state is JSON format

## LAMBDA
### policies
arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
and inline
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem"
            ],
            "Resource": "arn:aws:dynamodb:*:...:table/Wlowi"
        }
    ]
}
### policy
{
  "Version": "2012-10-17",
  "Id": "default",
  "Statement": [
    {
      "Sid": "...",
      "Effect": "Allow",
      "Principal": {
        "Service": "apigateway.amazonaws.com"
      },
      "Action": "lambda:InvokeFunction",
      "Resource": "arn:aws:lambda:us-east-2:...:function:WlowiPut",
      "Condition": {
        "ArnLike": {
          "AWS:SourceArn": "arn:aws:execute-api:us-east-2:...:8bgjlmnn4j/*/POST/ride"
        }
      }
    }
  ]
}
### code
const randomBytes = require('crypto').randomBytes;

const AWS = require('aws-sdk');

const ddb = new AWS.DynamoDB.DocumentClient();


exports.handler = (event, context, callback) => {
    if (!event.requestContext.authorizer) {
      errorResponse('Authorization not configured', context.awsRequestId, callback);
      return;
    }

    console.log('Received event : ', event);

    // Because we're using a Cognito User Pools authorizer, all of the claims
    // included in the authentication token are provided in the request context.
    // This includes the username as well as other attributes.
    var username = event.requestContext.authorizer.claims['cognito:username'];
    const query = event.queryStringParameters;
    if( query != null && query.hasOwnProperty('id') ) {
        username = query['id'];
    }

    if( event.httpMethod == "GET" ) {
        ddb.get({ TableName: 'Wlowi', Key: { Id: username }}).promise()
            .then(result => {
                    const response = {
                        statusCode: 200,
                        body: JSON.stringify(result.Item),
                };
            callback(null,response);
        }).catch((err) => {
            console.error(err);
            errorResponse(err.message, context.awsRequestId, callback);
        });
    }

    if( event.httpMethod == "POST" ) {
        const requestBody = JSON.parse(event.body);

        const gameData = requestBody;

        recordGame(username, gameData).then(() => {
            // Because this Lambda function is called by an API Gateway proxy integration
            // the result object must use the following structure.
            callback(null, {
                statusCode: 201,
                body: JSON.stringify({
                    Id: username,
                    Game: gameData,
                }),
                headers: {
                    'Access-Control-Allow-Origin': '*',
                },
            });
        }).catch((err) => {
            console.error(err);
            errorResponse(err.message, context.awsRequestId, callback);
        });
    }
};

function recordGame(username, gameData) {
    return ddb.put({
        TableName: 'Wlowi',
        Item: {
            Id: username,
            Game: gameData,
            RequestTime: new Date().toISOString(),
        },
    }).promise();
}

function errorResponse(errorMessage, awsRequestId, callback) {
  callback(null, {
    statusCode: 500,
    body: JSON.stringify({
      Error: errorMessage,
      Reference: awsRequestId,
    }),
    headers: {
      'Access-Control-Allow-Origin': '*',
    },
  });
}
### GET test
{
  "path": "/loadGame",
  "httpMethod": "GET",
  "headers": {
    "Accept": "*/*",
    "Authorization": "eyJraWQiOiJLTzRVMWZs",
    "content-type": "application/json; charset=UTF-8"
  },
  "queryStringParameters": {"id":"test"},
  "pathParameters": null,
  "requestContext": {
    "authorizer": {
      "claims": {
        "cognito:username": "the_username"
      }
    }
  }
}

### POST test
{
  "path": "/saveGame",
  "httpMethod": "POST",
  "headers": {
    "Accept": "*/*",
    "Authorization": "eyJraWQiOiJLTzRVMWZs",
    "content-type": "application/json; charset=UTF-8"
  },
  "queryStringParameters": {"id":"test"},
  "pathParameters": null,
  "requestContext": {
    "authorizer": {
      "claims": {
        "cognito:username": "the_username"
      }
    }
  },
  "body": "{\"email\":\"bob@test.com\",\"name\": \"Bob\",\"budget\": 3,\"status\": \"clear\"}"
}